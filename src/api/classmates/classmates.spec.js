// Generated by CoffeeScript 1.6.3
var Class, Classmate, Period, School, Stage, app, async, mongoose, request, should;

mongoose = require("mongoose");

async = require("async");

should = require("should");

request = require("supertest");

app = require("../../server");

School = mongoose.model('School');

Stage = mongoose.model('Stage');

Period = mongoose.model('Period');

Class = mongoose.model('Class');

Classmate = mongoose.model('Classmate');

describe("Classmate API", function() {
  var url;
  url = "http://localhost:3000";
  before(function(done) {
    var class1,
      _this = this;
    class1 = new Class({
      name: "Class 1.2.1"
    });
    this.school = new School({
      name: "School 1",
      stages: [
        {
          name: "Stage 1",
          periods: [
            {
              name: "Period 1.1"
            }, {
              name: "Period 1.2"
            }
          ]
        }, {
          name: "Stage 2",
          periods: [
            {
              name: "Period 2.1"
            }, {
              name: "Period 2.2"
            }
          ]
        }
      ]
    });
    this.school.save(function(err) {
      return should.not.exist(err);
    });
    return request(url).post("/api/schools/" + this.school._id + "/stages/" + this.school.stages[0]._id + "/periods/" + this.school.stages[0].periods[1]._id + "/classes").send(class1).expect('Content-Type', /json/).expect(200).end(function(err, res) {
      if (err) {
        throw err;
      }
      _this.class_added = res.body;
      _this.class_added.name.should.equal('Class 1.2.1');
      return done();
    });
  });
  describe("POST /schools/:id/stages/:id/periods/:id/classes/:id/classmates", function() {
    it("should creates a new Classmate", function(done) {
      var classmate,
        _this = this;
      classmate = {
        firstName: "Classmate FirstName",
        lastName: "Classmate LastName"
      };
      return request(url).post("/api/schools/" + this.school._id + "/stages/" + this.school.stages[0]._id + "/periods/" + this.school.stages[0].periods[1]._id + "/classes/" + this.class_added._id + "/classmates").field("firstName", classmate.firstName).field("lastName", classmate.lastName).attach('photo', __dirname + '/photo.jpg').end(function(err, res) {
        if (err) {
          throw err;
        }
        res.should.have.status(200);
        _this.classmate_added = res.body;
        _this.classmate_added.firstName.should.equal('Classmate FirstName');
        _this.classmate_added.lastName.should.equal('Classmate LastName');
        return done();
      });
    });
    return it("should link a Classmate in a Class", function(done) {
      return request(url).get("/api/schools/" + this.school._id + "/stages/" + this.school.stages[0]._id + "/periods/" + this.school.stages[0].periods[1]._id + "/classes/" + this.class_added._id + "/classmates/" + this.classmate_added._id).expect('Content-Type', /json/).expect(200).end(function(err, res) {
        if (err) {
          throw err;
        }
        res.should.be.json;
        res.body.length.should.equal(1);
        return done();
      });
    });
  });
  describe("GET /schools/:id/stages/:id/periods/:id/classes/:id/classmates", function() {
    return it("should lists a Classmates in a Class", function(done) {
      return request(url).get("/api/schools/" + this.school._id + "/stages/" + this.school.stages[0]._id + "/periods/" + this.school.stages[0].periods[1]._id + "/classes/" + this.class_added._id + "/classmates").expect('Content-Type', /json/).expect(200).end(function(err, res) {
        if (err) {
          throw err;
        }
        res.should.be.json;
        res.body.length.should.equal(1);
        return done();
      });
    });
  });
  return after(function(done) {
    return mongoose.connection.db.dropCollection("classmates", function(err) {
      if (err) {
        done(err);
      }
      return done();
    });
  });
});

// Generated by CoffeeScript 1.6.3
var School, app, async, mongoose, request, should;

mongoose = require("mongoose");

async = require("async");

should = require("should");

request = require("supertest");

app = require("../../server");

School = mongoose.model('School');

describe('School Model', function() {
  return it("should register a new School", function(done) {
    var school;
    school = new School({
      name: "Test 1"
    });
    return school.save(function(err) {
      should.not.exist(err);
      return done();
    });
  });
});

describe("Schools API", function() {
  var url;
  url = "http://localhost:3000";
  describe("GET /schools", function() {
    before(function(done) {
      var s, school, schools, _i, _len;
      schools = [
        {
          name: "Test School 1"
        }, {
          name: "Test School 2"
        }, {
          name: "Test School 3"
        }
      ];
      for (_i = 0, _len = schools.length; _i < _len; _i++) {
        s = schools[_i];
        school = new School(s);
        school.save(function(err) {
          if (err) {
            throw err;
          }
        });
      }
      return done();
    });
    it("should retrieve all Schools", function(done) {
      return request(url).get("/api/schools").expect('Content-Type', /json/).expect(200).end(function(err, res) {
        if (err) {
          throw err;
        }
        res.should.be.json;
        return done();
      });
    });
    return after(function(done) {
      return School.collection.remove(done);
    });
  });
  describe("POST /schools/:id", function() {
    it("should creates a new School", function(done) {
      var school,
        _this = this;
      school = {
        name: "Test School 1"
      };
      return request(url).post("/api/schools").send(school).expect('Content-Type', /json/).expect(200).end(function(err, res) {
        var school_added;
        if (err) {
          throw err;
        }
        school_added = res.body;
        res.body.should.have.property('_id');
        res.body.name.should.equal('Test School 1');
        res.body.createdAt.should.not.equal(null);
        return done();
      });
    });
    return it("should not create a new School without name", function(done) {
      var school,
        _this = this;
      school = {
        name: ""
      };
      return request(url).post("/api/schools").send(school).expect('Content-Type', /json/).expect(400).end(function(err, res) {
        if (err) {
          throw err;
        }
        return done();
      });
    });
  });
  describe("PUT /schools/:id", function() {
    before(function(done) {
      this.school_before = new School({
        name: "New School"
      });
      return this.school_before.save(done);
    });
    it("should update an existing School", function(done) {
      var school;
      school = {
        name: "Test School 1 modified"
      };
      return request(url).put("/api/schools/" + this.school_before._id).send(school).expect('Content-Type', /json/).expect(200).end(function(err, res) {
        if (err) {
          throw err;
        }
        res.body.should.have.property('_id');
        res.body.name.should.equal('Test School 1 modified');
        res.body.createdAt.should.not.equal(null);
        return done();
      });
    });
    return it("should not update a School without name", function(done) {
      var school,
        _this = this;
      school = {
        name: ""
      };
      return request(url).post("/api/schools").send(school).expect('Content-Type', /json/).expect(400).end(function(err, res) {
        if (err) {
          throw err;
        }
        return done();
      });
    });
  });
  describe("DELETE /schools/:id", function() {
    before(function(done) {
      this.school_before = new School({
        name: "New School",
        www: "www.newschool.edu.mx"
      });
      return this.school_before.save(done);
    });
    return it("should delete an existing School", function(done) {
      return request(url).del("/api/schools/" + this.school_before._id).expect(200).end(done);
    });
  });
  return after(function(done) {
    return mongoose.connection.db.dropCollection("schools", function(err) {
      if (err) {
        done(err);
      }
      return done();
    });
  });
});
